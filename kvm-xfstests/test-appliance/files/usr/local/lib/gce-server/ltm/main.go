/*
Webserver endpoints for the gce-xfstests LTM (lightweight test manager).

This stand-alone server handles requests sent by the client-side scripts.
The endpoints are:
	/login (deprecated) - to authenticate a user session, enforced by the flask
	webserver in the previous implementation.

	/gce-xfstests - takes in a json POST in the form of LTMRequest, and runs the
	tests.

*/
package main

import (
	"bufio"
	"encoding/base64"
	"encoding/json"
	"log"
	"net/http"
	"os"

	"example.com/gce-server/util"
	"google.golang.org/api/compute/v1"
)

// configurable user name for naming LTM files
const (
	LTMUserName = "ltm"
)

// TestResponse returns the request status and sharder info.
type TestResponse struct {
	Status bool        `json:"status"`
	Info   SharderInfo `json:"info"`
}

/*
runTests is the end point for launching a gce-xfstests test.
orig_cmdline is a base64 encoding of the command line arguments.
A ShardSchedular is constructed to arrange the tests in multiple
ShardWorkers, and then starts these shards in separate go routines.

Returns the info generated by the sharder
*/
func runTests(w http.ResponseWriter, r *http.Request) {
	var c util.UserRequest
	err := json.NewDecoder(r.Body).Decode(&c)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	data, err := base64.StdEncoding.DecodeString(c.CmdLine)
	util.Check(err)
	c.CmdLine = string(data)
	log.Printf("receive test request: %+v\n", &c)

	tester := NewShardSchedular(c)
	tester.Dump("/root/mock_sharder.json")
	log.Printf("create test schedular: %+v", &tester)
	sharderInfo := tester.StartTests()

	response := TestResponse{
		Status: true,
		Info:   sharderInfo,
	}
	js, _ := json.Marshal(response)
	w.Header().Set("Content-Type", "application/json")
	w.Write(js)
}

func main() {
	http.HandleFunc("/", util.Index)
	http.HandleFunc("/login", util.Login)
	http.HandleFunc("/gce-xfstests", runTests)
	err := http.ListenAndServeTLS(":443", util.CertPath, util.SecretPath, nil)
	if err != nil {
		log.Fatal("ListenandServer: ", err)
	}
}

var repo util.Repository

func test() {
	reader := bufio.NewReader(os.Stdin)
	for true {
		arg, _ := reader.ReadString('\n')
		switch arg[:len(arg)-1] {
		case "clone":
			repo = util.Clone("https://github.com/XiaoyangShen/spinner_test.git", "master")
		case "commit":
			id := repo.GetCommit()
			log.Println(id)
		case "pull":
			repo.Pull()
		case "watch":
			repo.Watch()
		}
	}
}

func test1() {
	reader := bufio.NewReader(os.Stdin)
	for true {
		arg, _ := reader.ReadString('\n')

		validArg, configs := util.ParseCmd(arg[:len(arg)-1])
		log.Printf("%s; %+v\n", validArg, configs)
	}
}

func test2() {
	gce := util.NewGceService("xfstests-xyshen")
	info, err := gce.GetInstanceInfo("gce-xfstests-bldsrv", "us-central1-f", "xfstests-ltm")
	util.Check(err)
	log.Printf("%+v", info.Metadata)
	for _, item := range info.Metadata.Items {
		log.Printf("%+v", item)
	}

	val := "ahaah"
	newMetadata := compute.Metadata{
		Fingerprint: info.Metadata.Fingerprint,
		Items: []*compute.MetadataItems{
			{
				Key:   "shutdown_reason",
				Value: &val,
			},
		},
	}
	gce.SetMetadata("gce-xfstests-bldsrv", "us-central1-f", "xfstests-ltm", &newMetadata)
}

func test3() {
	tester := ReadSharder("/root/mock_sharder.json")
	for _, shard := range tester.shards {
		shard.finish(true)
	}
	tester.finish()
}
